#!/usr/bin/env python
#
# gobjectogen - GObject generator
#
# Copyright (c) 2013 Eric Le Bihan <eric.le.bihan.dev@free.fr>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import argparse
from gobjectogen.generators import ClassGenerator, InterfaceGenerator
from gobjectogen.generators import (CLASS_HAS_PRIVATE, CLASS_HAS_PROPGET,
                                    CLASS_HAS_PROPSET, CLASS_HAS_DISPOSE,
                                    CLASS_HAS_FINALIZE, CLASS_IS_ABSTRACT)
import gettext
from gettext import gettext as _

if hasattr(sys, 'frozen'):
    ROOT_DIR = os.path.dirname(sys.executable)
else:
    ROOT_DIR = os.path.dirname(os.path.abspath(__file__))
LOCALE_DIR = os.path.join(ROOT_DIR, '..', 'share', 'locale')

gettext.bindtextdomain('gobjectogen', LOCALE_DIR)
gettext.textdomain('gobjectogen')

def configure_generator(gen, args):
    gen.parent = args.parent
    gen.namespace = args.namespace
    gen.interfaces = args.interfaces
    gen.errors = args.errors
    gen.author = args.author
    gen.description = args.description
    if args.private:
        gen.flags |= CLASS_HAS_PRIVATE
    if args.propget:
        gen.flags |= CLASS_HAS_PROPGET
    if args.propset:
        gen.flags |= CLASS_HAS_PROPSET
    if args.dispose:
        gen.flags |= CLASS_HAS_DISPOSE
    if args.finalize:
        gen.flags |= CLASS_HAS_FINALIZE
    if args.abstract:
        gen.flags |= CLASS_IS_ABSTRACT

    if args.license_file:
        with open(args.license_file) as f:
            gen.license = f.read()

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('name',
                        metavar=_('NAME'),
                        help=_('name of the GObject class (in CamelCase)'))
    parser.add_argument('-o', '--output',
                        metavar=_('DIRECTORY'),
                        default=os.getcwd(),
                        help=_('set output directory'))
    parser.add_argument('-N', '--namespace',
                        metavar=_('NAME'),
                        help=_('set namespace'))
    parser.add_argument('-P', '--parent',
                        help=_('set parent class'))
    parser.add_argument('-I', '--implements',
                        action='append',
                        dest='interfaces',
                        default=[],
                        metavar=_('INTERFACE'),
                        help=_('set implemented interface'))
    parser.add_argument('-A', '--abstract',
                        action='store_true',
                        default=False,
                        help=_('generate an abstract class'))
    parser.add_argument('-F', '--interface',
                        action='store_true',
                        default=False,
                        help=_('generate an interface'))
    parser.add_argument('-E', '--error',
                        action='append',
                        dest='errors',
                        default=[],
                        metavar=_('NAME'),
                        help=_('add an error code'))
    parser.add_argument('-p', '--private',
                        action='store_true',
                        default=False,
                        help=_('include structure to hold private members'))
    parser.add_argument('-d', '--dispose',
                        action='store_true',
                        default=False,
                        help=_('include dispose method'))
    parser.add_argument('-f', '--finalize',
                        action='store_true',
                        default=False,
                        help=_('include finalize method'))
    parser.add_argument('-s', '--propset',
                        action='store_true',
                        default=False,
                        help=_('include method to set properties'))
    parser.add_argument('-g', '--propget',
                        action='store_true',
                        default=False,
                        help=_('include method to get properties'))
    parser.add_argument('-a', '--author',
                        metavar=_('NAME'),
                        default='Unknown',
                        help=_('set author of the program'))
    parser.add_argument('-t', '--description',
                        metavar=_('TEXT'),
                        default='Insert program description here',
                        help=_('set description of the program'))
    parser.add_argument('-l', '--license-file',
                        metavar=_('FILE'),
                        help=_('set path to license file'))
    args = parser.parse_args()

    if args.interface:
        gen = InterfaceGenerator(args.name)
    else:
        gen = ClassGenerator(args.name)
        configure_generator(gen, args)

    gen.generate(args.output)

# vim: ts=4 sw=4 sts=4 et ai
