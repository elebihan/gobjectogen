#!/usr/bin/env python3
#
# gobjectogen - GObject generator
#
# Copyright (c) 2013 Eric Le Bihan <eric.le.bihan.dev@free.fr>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import argparse
from gobjectogen import __version__
from gobjectogen.generators import AccessorGenerator
import gettext
from gettext import gettext as _

if hasattr(sys, 'frozen'):
    ROOT_DIR = os.path.dirname(sys.executable)
else:
    ROOT_DIR = os.path.dirname(os.path.abspath(__file__))
LOCALE_DIR = os.path.join(ROOT_DIR, '..', 'share', 'locale')

gettext.bindtextdomain('gobjectogen', LOCALE_DIR)
gettext.textdomain('gobjectogen')

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--version',
                        action='version',
                        version=__version__)
    parser.add_argument('class_name',
                        metavar=_('CLASS'),
                        help=_('name of the GObject class (in CamelCase)'))
    parser.add_argument('prop_name',
                        metavar=_('PROPERTY'),
                        help=_('name of the property'))
    parser.add_argument('prop_type',
                        metavar=_('TYPE'),
                        help=_('type of the property'))
    parser.add_argument('-B', '--boxed',
                        action='store_true',
                        help=_('generate code for GBoxed instead of GObject'))
    parser.add_argument('-M', '--mode',
                        choices=['code', 'header'],
                        default='code',
                        help=_('set generation mode'))
    parser.add_argument('-N', '--namespace',
                        metavar=_('NAME'),
                        help=_('set namespace'))

    args = parser.parse_args()

    modes = {
        'code': AccessorGenerator.MODE_CODE,
        'header': AccessorGenerator.MODE_HEADER,
    }

    gen = AccessorGenerator(args.class_name, args.prop_name, args.prop_type)
    gen.namespace = args.namespace
    gen.boxed = args.boxed
    gen.generate(modes[args.mode])

# vim: ts=4 sw=4 sts=4 et ai
